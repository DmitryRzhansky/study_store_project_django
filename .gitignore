# Скомпилированные / оптимизированные / DLL файлы
__pycache__/
*.py[codz]
*$py.class

# C расширения
*.so

# Распространение / упаковка
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Обычно эти файлы создаются скриптом Python из шаблона
#  перед сборкой exe PyInstaller, чтобы вставить дату/другую информацию.
*.manifest
*.spec

# Логи установщика
pip-log.txt
pip-delete-this-directory.txt

# Unit тесты / отчеты о покрытии
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py.cover
.hypothesis/
.pytest_cache/
cover/

# Переводы
*.mo
*.pot

# Django
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
/media

# Flask
instance/
.webassets-cache

# Scrapy
.scrapy

# Документация Sphinx
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   Для библиотеки или пакета можно игнорировать эти файлы, так как код
#   предназначен для запуска в нескольких средах; иначе — включайте в репозиторий:
# .python-version

# pipenv
#   Согласно pypa/pipenv#598, рекомендуется включать Pipfile.lock в систему контроля версий.
#   Однако при совместной работе с платформозависимыми зависимостями pipenv может устанавливать неработающие зависимости или не установить всё необходимое.
#Pipfile.lock

# UV
#   Аналогично Pipfile.lock, рекомендуется включать uv.lock в версионный контроль.
#   Особенно важно для бинарных пакетов, чтобы обеспечить воспроизводимость.
#uv.lock

# poetry
#   Аналогично Pipfile.lock, рекомендуется включать poetry.lock в версионный контроль.
#   Особенно важно для бинарных пакетов, чтобы обеспечить воспроизводимость.
#poetry.lock
#poetry.toml

# pdm
#   Аналогично Pipfile.lock, рекомендуется включать pdm.lock в контроль версий.
#   PDM рекомендует включать глобальную конфигурацию в pdm.toml, но исключать .pdm-python.
#pdm.lock
#pdm.toml
.pdm-python
.pdm-build/

# pixi
#   Аналогично Pipfile.lock, рекомендуется включать pixi.lock в версионный контроль.
#pixi.lock
#   Pixi создаёт виртуальное окружение в .pixi, аналогично venv.
.pixi

# PEP 582; используется, например, github.com/David-OConnor/pyflow и github.com/pdm-project/pdm
__pypackages__/

# Celery
celerybeat-schedule
celerybeat.pid

# Redis
*.rdb
*.aof
*.pid

# RabbitMQ
mnesia/
rabbitmq/
rabbitmq-data/

# ActiveMQ
activemq-data/

# Файлы SageMath
*.sage.py

# Среды
.env
.envrc
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Настройки проекта Spyder
.spyderproject
.spyproject

# Настройки проекта Rope
.ropeproject

# Документация mkdocs
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre проверка типов
.pyre/

# pytype статический анализатор типов
.pytype/

# Символы отладки Cython
cython_debug/

# PyCharm
#  Шаблон JetBrains поддерживается отдельно и доступен по ссылке:
#  https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#.idea/

# Abstra
# Abstra — это фреймворк автоматизации процессов с AI.
# Игнорировать директории с пользовательскими данными и настройками.
.abstra/

# Visual Studio Code
#  Шаблон для VS Code поддерживается отдельно: https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore
.vscode/

# Ruff
.ruff_cache/

# Конфигурация PyPI
.pypirc

# Marimo
marimo/_static/
marimo/_lsp/
__marimo__/

# Streamlit
.streamlit/secrets.toml
static/deps/images/icons/facebook.svg
static/deps/images/icons/github.svg
.gitignore
